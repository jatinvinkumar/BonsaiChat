{"ast":null,"code":"var _jsxFileName = \"/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js\";\n// firebase.js\n// contains the Firebase context and provider\nimport React, { createContext, useEffect } from 'react';\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app';\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { sessionConnect } from '../actions/databaseActions';\nimport { todoActions } from '../state/todos'; // we create a React Context, for this to be accessible\n// from a component later\n\nconst FirebaseContext = createContext(null);\nexport { FirebaseContext };\nexport default (({\n  children\n}) => {\n  let firebase = {\n    app: null,\n    database: null\n  };\n  const dispatch = useDispatch(); // check if firebase app has been initialized previously\n  // if not, initialize with the config we saved earlier\n\n  if (!app.apps.length) {\n    app.initializeApp(firebaseConfig);\n    firebase = {\n      app: app,\n      database: app.database(),\n      api: {\n        getTodos\n      }\n    };\n  } // function to query Todos from the database and\n  // fire a Redux action to update the items in real-time\n\n\n  function getTodos() {\n    firebase.database.ref('sessions').on('value', snapshot => {\n      const vals = snapshot.val();\n      let _records = [];\n\n      for (var key in vals) {\n        _records.push({ ...vals[key],\n          id: key\n        });\n      } // setTodos is a Redux action that would update the todo store\n      // to the _records payload\n\n\n      dispatch(setTodos(_records));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(FirebaseContext.Provider, {\n    value: firebase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, children);\n});","map":{"version":3,"sources":["/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js"],"names":["React","createContext","useEffect","firebaseConfig","app","useDispatch","sessionConnect","todoActions","FirebaseContext","children","firebase","database","dispatch","apps","length","initializeApp","api","getTodos","ref","on","snapshot","vals","val","_records","key","push","id","setTodos"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;AACA;;AACA,MAAMC,eAAe,GAAGP,aAAa,CAAC,IAAD,CAArC;AACA,SAASO,eAAT;AAEA,gBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7B,MAAIC,QAAQ,GAAG;AACXN,IAAAA,GAAG,EAAE,IADM;AAEXO,IAAAA,QAAQ,EAAE;AAFC,GAAf;AAKA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B,CAN6B,CAQ7B;AACA;;AACA,MAAI,CAACD,GAAG,CAACS,IAAJ,CAASC,MAAd,EAAsB;AAClBV,IAAAA,GAAG,CAACW,aAAJ,CAAkBZ,cAAlB;AACAO,IAAAA,QAAQ,GAAG;AACPN,MAAAA,GAAG,EAAEA,GADE;AAEPO,MAAAA,QAAQ,EAAEP,GAAG,CAACO,QAAJ,EAFH;AAIPK,MAAAA,GAAG,EAAE;AACDC,QAAAA;AADC;AAJE,KAAX;AAQH,GApB4B,CAsB7B;AACA;;;AACA,WAASA,QAAT,GAAmB;AACfP,IAAAA,QAAQ,CAACC,QAAT,CAAkBO,GAAlB,CAAsB,UAAtB,EAAkCC,EAAlC,CAAqC,OAArC,EAA+CC,QAAD,IAAc;AACxD,YAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb;AACA,UAAIC,QAAQ,GAAG,EAAf;;AACA,WAAI,IAAIC,GAAR,IAAeH,IAAf,EAAoB;AAChBE,QAAAA,QAAQ,CAACE,IAAT,CAAc,EACV,GAAGJ,IAAI,CAACG,GAAD,CADG;AAEVE,UAAAA,EAAE,EAAEF;AAFM,SAAd;AAIH,OARuD,CASxD;AACA;;;AACAZ,MAAAA,QAAQ,CAACe,QAAQ,CAACJ,QAAD,CAAT,CAAR;AACH,KAZD;AAaH;;AAED,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEb,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ;AAKH,CA7CD","sourcesContent":["// firebase.js\n// contains the Firebase context and provider\n\nimport React, { createContext, useEffect } from 'react'\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app'\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { sessionConnect } from '../actions/databaseActions'\nimport { todoActions } from '../state/todos';\n\n// we create a React Context, for this to be accessible\n// from a component later\nconst FirebaseContext = createContext(null)\nexport { FirebaseContext }\n\nexport default ({ children }) => {\n    let firebase = {\n        app: null,\n        database: null\n    }\n\n    const dispatch = useDispatch();\n\n    // check if firebase app has been initialized previously\n    // if not, initialize with the config we saved earlier\n    if (!app.apps.length) {\n        app.initializeApp(firebaseConfig);\n        firebase = {\n            app: app,\n            database: app.database(),\n\n            api: {\n                getTodos\n            }\n        }\n    }\n\n    // function to query Todos from the database and\n    // fire a Redux action to update the items in real-time\n    function getTodos(){\n        firebase.database.ref('sessions').on('value', (snapshot) => {\n            const vals = snapshot.val();\n            let _records = [];\n            for(var key in vals){\n                _records.push({\n                    ...vals[key],\n                    id: key\n                });\n            }\n            // setTodos is a Redux action that would update the todo store\n            // to the _records payload\n            dispatch(setTodos(_records));\n        })\n    }\n\n    return (\n        <FirebaseContext.Provider value={firebase}>\n            {children}\n        </FirebaseContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}