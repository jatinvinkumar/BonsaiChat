{"ast":null,"code":"var _jsxFileName = \"/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js\";\n// firebase.js\n// contains the Firebase context and provider\nimport React, { createContext, useEffect } from 'react';\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app';\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession, updateConversationIDS, updateConversation, updateClientMeta } from '../actions/Actions'; // we create a React Context, for this to be accessible\n// from a component later\n\nconst FirebaseContext = createContext(null);\nexport { FirebaseContext };\nexport default (({\n  children\n}) => {\n  let firebase = {\n    app: null,\n    database: null\n  };\n  const dispatch = useDispatch(); // check if firebase app has been initialized previously\n  // if not, initialize with the config we saved earlier\n\n  if (!app.apps.length) {\n    app.initializeApp(firebaseConfig);\n    firebase = {\n      app: app,\n      database: app.database(),\n      api: {\n        initConversationListener,\n        initSession,\n        getTodos\n      }\n    };\n  } //Start a listener to check for any new conversations \n\n\n  function initSession(id) {\n    //Check & attatch conversation Listeners for new convos\n    firebase.database.ref('sessions/' + id + \"/conversations\").on('child_added', snapshot => {\n      const vals = snapshot.val();\n\n      if (Array.isArray(vals)) {\n        vals.forEach(convoID => {\n          initConversationListener(convoID);\n        });\n      } else {\n        initConversationListener(vals);\n      }\n\n      console.log(\"Sup bits: \" + vals); // dispatch Redux action that would update the store\n\n      getClientMeta(id);\n      dispatch(updateConversationIDS(vals));\n    });\n  } //Gets once the metaData of the \n\n\n  function getClientMeta(id) {\n    firebase.database.ref('clients/' + id).once('value').then(snapshot => {\n      const vals = snapshot.val(); // dispatch Redux action that would update the store\n\n      console.log(\"clientFirebase: \", vals);\n      dispatch(updateClientMeta(vals.HeaderHome, vals.HeaderDesc, vals.logo, vals.themeColor));\n    });\n  }\n\n  function initConversationListener(id) {\n    firebase.database.ref('conversations/' + id + '/history').on('child_added', snapshot => {\n      const vals = snapshot.val();\n      console.log(\"ConvoMessages: Firebase\");\n      console.log(id);\n      console.log(vals); // dispatch Redux action that would update the store\n\n      dispatch(updateConversation(id, vals));\n    });\n  } // function to query Todos from the database and \n  // fire a Redux action to update the items in real-time\n\n\n  function getTodos() {\n    firebase.database.ref('sessions').on('value', snapshot => {\n      const vals = snapshot.val();\n      let _records = [];\n\n      for (var key in vals) {\n        _records.push({ ...vals[key],\n          id: key\n        });\n      } // setTodos is a Redux action that would update the todo store\n      // to the _records payload\n\n\n      dispatch(updateSession(_records));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(FirebaseContext.Provider, {\n    value: firebase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, children);\n});","map":{"version":3,"sources":["/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js"],"names":["React","createContext","useEffect","firebaseConfig","app","useDispatch","updateSession","updateConversationIDS","updateConversation","updateClientMeta","FirebaseContext","children","firebase","database","dispatch","apps","length","initializeApp","api","initConversationListener","initSession","getTodos","id","ref","on","snapshot","vals","val","Array","isArray","forEach","convoID","console","log","getClientMeta","once","then","HeaderHome","HeaderDesc","logo","themeColor","_records","key","push"],"mappings":"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","sourcesContent":["// firebase.js\n// contains the Firebase context and provider\n\nimport React, { createContext, useEffect } from 'react'\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app'\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession, updateConversationIDS, updateConversation, updateClientMeta } from '../actions/Actions'\n\n\n// we create a React Context, for this to be accessible\n// from a component later\nconst FirebaseContext = createContext(null)\nexport { FirebaseContext }\n\nexport default ({ children }) => {\n    let firebase = {\n        app: null,\n        database: null\n    }\n\n    const dispatch = useDispatch();\n\n    // check if firebase app has been initialized previously\n    // if not, initialize with the config we saved earlier\n    if (!app.apps.length) {\n        app.initializeApp(firebaseConfig);\n        firebase = {\n            app: app,\n            database: app.database(),\n\n            api: {\n                initConversationListener,\n                initSession,\n                getTodos\n            }\n        }\n    }\n\n    //Start a listener to check for any new conversations \n    function initSession(id){\n        //Check & attatch conversation Listeners for new convos\n        firebase.database.ref('sessions/' + id + \"/conversations\").on('child_added', (snapshot) => {\n            const vals = snapshot.val();\n            if (Array.isArray(vals)){\n                vals.forEach(convoID => {\n                    initConversationListener(convoID)\n                });\n            } else {\n                initConversationListener(vals)\n            }\n            console.log(\"Sup bits: \" + vals)\n            // dispatch Redux action that would update the store\n            getClientMeta(id)\n            dispatch(updateConversationIDS(vals));\n            \n        })\n    }\n\n    //Gets once the metaData of the \n    function getClientMeta(id){\n        firebase.database.ref('clients/' + id).once('value').then((snapshot) => {\n            const vals = snapshot.val();\n            // dispatch Redux action that would update the store\n            console.log(\"clientFirebase: \", vals)\n            dispatch(updateClientMeta(vals.HeaderHome, vals.HeaderDesc, vals.logo, vals.themeColor))\n        })\n    }\n\n    function initConversationListener(id){\n        firebase.database.ref('conversations/' + id + '/history').on('child_added', (snapshot) => {\n            const vals = snapshot.val();\n            console.log(\"ConvoMessages: Firebase\")\n            console.log(id);\n            console.log(vals);\n            // dispatch Redux action that would update the store\n            dispatch(updateConversation(id, vals));\n        })\n    }\n\n    // function to query Todos from the database and \n    // fire a Redux action to update the items in real-time\n    function getTodos(){\n        firebase.database.ref('sessions').on('value', (snapshot) => {\n            const vals = snapshot.val();\n            let _records = [];\n            for(var key in vals){\n                _records.push({\n                    ...vals[key],\n                    id: key\n                });\n            }\n            // setTodos is a Redux action that would update the todo store\n            // to the _records payload\n            dispatch(updateSession(_records));\n        })\n    }\n\n    return (\n        <FirebaseContext.Provider value={firebase}>\n            {children}\n        </FirebaseContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}