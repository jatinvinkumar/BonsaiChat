{"ast":null,"code":"var _jsxFileName = \"/Users/jatinkumar/Downloads/BonsaiChat/src/Chat.js\";\nimport React from 'react';\nimport './App.css';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport ChatBanner from './ChatBanner';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { Info } from '@material-ui/icons';\nimport { Typography } from '@material-ui/core';\nconst steps = [{\n  id: '0',\n  component: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      direction: 'row',\n      verticalAlign: 'middle',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    style: {\n      fontSize: 30,\n      opacity: 0.6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    style: {\n      opacity: 0.8,\n      paddingLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \"Live support is available Monday - Friday, 9 am-6 pm CST.\")),\n  trigger: '1'\n}, {\n  id: '1',\n  message: 'Welcome to Bonsai!',\n  trigger: '2'\n}, {\n  id: '2',\n  message: 'What service what !',\n  trigger: '3'\n}, {\n  id: '3',\n  options: [{\n    value: 1,\n    label: 'Number 1',\n    trigger: '1'\n  }, {\n    value: 2,\n    label: 'Number 2',\n    trigger: '1'\n  }, {\n    value: 3,\n    label: 'Number 3',\n    trigger: '1'\n  }]\n}];\nconst theme = {\n  background: '#f5f8fb',\n  fontFamily: 'Helvetica Neue',\n  headerBgColor: '#000000',\n  headerFontColor: '#fff',\n  headerFontSize: '15px',\n  botBubbleColor: '#EF6C00',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a'\n};\nvar isScrolling;\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 225,\n      yDiff: 0\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.resizeHeaderOnScroll.bind(this));\n  }\n\n  resizeHeaderOnScroll() {\n    const distanceY = window.pageYOffset || document.documentElement.scrollTop;\n    console.log(distanceY);\n\n    if (distanceY >= 85) {\n      this.setState({\n        height: 225 - 85,\n        collapsed: true\n      });\n    } else {\n      this.setState({\n        height: 225 - distanceY,\n        yDiff: distanceY,\n        collapsed: false\n      });\n    } // Clear our timeout throughout the scroll\n\n\n    window.clearTimeout(isScrolling); // Set a timeout to run after scrolling ends\n\n    for (var i = 0; i < 100; i++) {\n      if (distanceY >= 85) {\n        this.setState({\n          height: 225 - 85,\n          collapsed: true\n        });\n      } else {\n        this.setState({\n          height: 225,\n          collapsed: false\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatBanner, {\n      id: \"header\",\n      height: this.state.height,\n      style: {\n        backgroundColor: \"black\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ChatBot, {\n      hideHeader: true,\n      steps: steps,\n      contentStyle: {\n        height: window.innerHeight - this.state.height - 50 + this.state.yDiff\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jatinkumar/Downloads/BonsaiChat/src/Chat.js"],"names":["React","ChatBot","ThemeProvider","ChatBanner","InfoIcon","Info","Typography","steps","id","component","display","direction","verticalAlign","alignItems","fontSize","opacity","paddingLeft","trigger","message","options","value","label","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","isScrolling","Chat","Component","constructor","props","state","height","yDiff","componentDidMount","window","addEventListener","resizeHeaderOnScroll","bind","distanceY","pageYOffset","document","documentElement","scrollTop","console","log","setState","collapsed","clearTimeout","i","render","backgroundColor","innerHeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport ChatBanner from './ChatBanner';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { Info } from '@material-ui/icons';\nimport { Typography } from '@material-ui/core';\n\nconst steps = [\n  {\n    id: '0',\n    component: (\n      <div style={{display:'flex', direction:'row', verticalAlign:'middle', alignItems: 'center'}}>\n        <InfoIcon style={{fontSize: 30, opacity: 0.6}}/>\n        <Typography variant={\"caption\"} style={{ opacity:0.8, paddingLeft: 10}}>Live support is available Monday - Friday, 9 am-6 pm CST.</Typography>\n      </div>\n    ),\n    trigger: '1'\n  },\n  {\n    id: '1',\n    message: 'Welcome to Bonsai!',\n    trigger: '2',\n  },\n  {\n    id: '2',\n    message: 'What service what !',\n    trigger: '3'\n  },\n  {\n    id: '3',\n    options: [\n      { value: 1, label: 'Number 1', trigger: '1' },\n      { value: 2, label: 'Number 2', trigger: '1' },\n      { value: 3, label: 'Number 3', trigger: '1' },\n    ],\n  },\n];\n\nconst theme = {\n  background: '#f5f8fb',\n  fontFamily: 'Helvetica Neue',\n  headerBgColor: '#000000',\n  headerFontColor: '#fff',\n  headerFontSize: '15px',\n  botBubbleColor: '#EF6C00',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a',\n};\n\nvar isScrolling;\n\nexport default class Chat extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {height: 225, yDiff: 0};\n  }\n  \n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.resizeHeaderOnScroll.bind(this));\n  }\n  \n  resizeHeaderOnScroll() {\n    \n    const distanceY = window.pageYOffset || document.documentElement.scrollTop\n\n    console.log(distanceY);\n     if (distanceY >= 85) {\n        this.setState({height: 225-85, collapsed: true});\n     } else {\n        this.setState({height: 225 - distanceY, yDiff: distanceY, collapsed: false});\n     }\n\n      // Clear our timeout throughout the scroll\n      window.clearTimeout( isScrolling );\n\n      // Set a timeout to run after scrolling ends\n      for(var i = 0; i < 100; i ++){\n        if (distanceY >= 85) {\n          this.setState({height: 225-85, collapsed: true});\n       } else {\n          this.setState({height: 225, collapsed: false});\n       }\n      }\n  }\n\n  render(){\n      return(\n          <>\n              <ChatBanner id=\"header\" height={this.state.height} style={{backgroundColor:\"black\",}} />\n              <ThemeProvider theme={theme}>\n                <ChatBot hideHeader={true} steps={steps} contentStyle={{height: (window.innerHeight - this.state.height - 50) + this.state.yDiff}} />\n              </ThemeProvider>\n          </>\n      )\n  }\n\n}"]},"metadata":{},"sourceType":"module"}