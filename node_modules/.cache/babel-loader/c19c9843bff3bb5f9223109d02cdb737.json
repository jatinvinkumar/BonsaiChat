{"ast":null,"code":"var _jsxFileName = \"/Users/jatinkumar/Downloads/BonsaiChat/src/GhostChat.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport './App.css';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport ChatBanner from './ChatBanner';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { AttachFileTwoTone, EmojiEmotionsTwoTone, FreeBreakfastOutlined, Info } from '@material-ui/icons';\nimport { Button, Container, Input, Typography } from '@material-ui/core';\nimport { RemoveScrollBar } from 'react-remove-scroll-bar';\nimport { connect } from 'react-redux';\nimport { FirebaseContext } from \"./firebase/firebase\";\nimport { Widget, addResponseMessage, toggleWidget, dropMessages, addUserMessage } from 'react-chat-widget';\nimport './Chat.css';\nvar stateData;\nvar chatID;\nvar m = \"place\";\nvar pointer = 0;\nvar triggerN = \"\";\nvar message = \"\";\nvar showing = false;\nconst theme = {\n  background: '#f5f8fb',\n  fontFamily: 'Helvetica Neue',\n  headerBgColor: '#000000',\n  headerFontColor: '#fff',\n  headerFontSize: '15px',\n  botBubbleColor: '#EF6C00',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a'\n};\n\nfunction loopThru(props) {\n  chatID = props.match.params.id;\n  console.log(\"lebron\", props, pointer);\n\n  if (props.data[chatID] && pointer < props.data[chatID].length) {\n    if (props.data[chatID][pointer].sender == \"user\") {\n      addUserMessage(props.data[chatID][pointer].data, pointer);\n    } else {\n      addResponseMessage(props.data[chatID][pointer].data, pointer);\n    }\n\n    pointer++;\n    loopThru(props);\n    console.log(\"pointer: \", pointer);\n  }\n\n  return;\n}\n\nfunction GhostChat(props) {\n  if (!showing) {\n    toggleWidget();\n    showing = true;\n  }\n\n  const {\n    app,\n    api\n  } = useContext(FirebaseContext);\n  const [userInput, setInput] = useState(0);\n\n  const inputChange = event => {\n    //setInput(event.target.value)\n    message = event.target.value;\n  };\n\n  const handleSend = () => {\n    if (message == \"\") {\n      return;\n    }\n\n    addUserMessage(message);\n    api.addMessage(pointer, chatID, message);\n    message = \"\";\n  };\n\n  const handleNewUserMessage = newMessage => {\n    console.log(`New message incoming! ${newMessage}`); // Now send the message throught the backend API\n  };\n\n  stateData = props.data;\n  dropMessages();\n  pointer = 0;\n  loopThru(props);\n  toggleWidget();\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      overflowY: 'scroll',\n      height: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Widget, {\n    handleNewUserMessage: handleNewUserMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    style: {\n      bottom: 0,\n      width: \"100%\",\n      padding: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"shadow\",\n    style: {\n      backgroundColor: 'white',\n      borderRadius: 8,\n      padding: 20,\n      boxShadow: '0 0 0 1px rgba(0,0,0,0.01)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"userInput\",\n    onChange: inputChange,\n    placeholder: \"Enter a description to help people find what they need\",\n    disableUnderline: \"true\",\n    style: {\n      fontSize: 12,\n      textAlign: \"left\"\n    },\n    fullWidth: \"true\",\n    inputProps: {\n      'aria-label': 'description',\n      disableUnderline: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(EmojiEmotionsTwoTone, {\n    style: {\n      color: \"#3599FF\",\n      marginRight: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(AttachFileTwoTone, {\n    style: {\n      color: \"#3599FF\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onSubmit: handleSend,\n    onClick: handleSend,\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }, \"Send\")))));\n} //Recieve data from state\n\n\nconst mapStateToProps = (state, ownProps) => {\n  //let id = ownProps.match.params.post_id;\n  return {\n    data: state\n  };\n}; //To Send actions to state\n\n\nconst mapDispatchToProps = dispatch => {\n  return {//deletePost: (id) => dispatch(deletePost(id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GhostChat);","map":{"version":3,"sources":["/Users/jatinkumar/Downloads/BonsaiChat/src/GhostChat.js"],"names":["React","useEffect","useState","useContext","ChatBot","ThemeProvider","ChatBanner","InfoIcon","AttachFileTwoTone","EmojiEmotionsTwoTone","FreeBreakfastOutlined","Info","Button","Container","Input","Typography","RemoveScrollBar","connect","FirebaseContext","Widget","addResponseMessage","toggleWidget","dropMessages","addUserMessage","stateData","chatID","m","pointer","triggerN","message","showing","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","loopThru","props","match","params","id","console","log","data","length","sender","GhostChat","app","api","userInput","setInput","inputChange","event","target","value","handleSend","addMessage","handleNewUserMessage","newMessage","width","overflowY","height","bottom","padding","backgroundColor","borderRadius","boxShadow","display","alignItems","marginTop","fontSize","textAlign","disableUnderline","color","marginRight","mapStateToProps","state","ownProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext}from 'react';\nimport './App.css';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport ChatBanner from './ChatBanner';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { AttachFileTwoTone, EmojiEmotionsTwoTone, FreeBreakfastOutlined, Info } from '@material-ui/icons';\nimport { Button, Container, Input, Typography } from '@material-ui/core';\nimport {RemoveScrollBar} from 'react-remove-scroll-bar';\nimport { connect } from 'react-redux'\n\nimport { FirebaseContext } from \"./firebase/firebase\";\n\nimport { Widget, addResponseMessage, toggleWidget, dropMessages, addUserMessage } from 'react-chat-widget';\nimport './Chat.css'; \n\nvar stateData;\nvar chatID;\nvar m = \"place\";\nvar pointer = 0;\nvar triggerN = \"\"\n\nvar message = \"\";\n\nvar showing = false;\n\n\nconst theme = {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#000000',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#EF6C00',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a',\n  };\n\nfunction loopThru(props){\n  chatID = props.match.params.id;\n  console.log(\"lebron\", props, pointer);\n  if(props.data[chatID] && pointer < props.data[chatID].length){\n    if(props.data[chatID][pointer].sender == \"user\"){\n      addUserMessage(props.data[chatID][pointer].data, pointer)\n    } else{\n      addResponseMessage(props.data[chatID][pointer].data, pointer)\n    }\n    pointer++\n    loopThru(props)\n    console.log(\"pointer: \", pointer)\n  }\n  return;\n}\n\n\n\nfunction GhostChat(props){\n\n  if(!showing){\n    toggleWidget();\n    showing = true;\n  }\n\n  const { app, api } = useContext(FirebaseContext);\n\n  const [userInput, setInput] = useState(0);\n\n  const inputChange = (event) => {\n    //setInput(event.target.value)\n    message = event.target.value;\n  };\n\n  const handleSend = () => {\n    if(message == \"\"){return} \n    addUserMessage(message);\n    api.addMessage(pointer, chatID, message)\n    message = \"\";\n  };\n\n  const handleNewUserMessage = (newMessage) => {\n    console.log(`New message incoming! ${newMessage}`);\n    // Now send the message throught the backend API\n  };\n\n  stateData = props.data;\n  dropMessages()\n  pointer = 0;\n  loopThru(props);\n\n  toggleWidget()\n    return(\n      <ThemeProvider theme={theme} style={{width:'100%'}}>\n          <div style={{width:'100%', overflowY:'scroll', height: 400,}}>\n            <Widget\n              handleNewUserMessage={handleNewUserMessage}\n            />\n          </div>\n          <Container style={{  bottom:0, width:\"100%\", padding:10}}>\n              <Container className=\"shadow\" style={{backgroundColor: 'white', borderRadius: 8, padding: 20, boxShadow: '0 0 0 1px rgba(0,0,0,0.01)'}}>\n                \n                <div style={{display:'flex', alignItems:'center', marginTop: 20, }}>\n                <Input id={\"userInput\"} onChange={inputChange} placeholder=\"Enter a description to help people find what they need\" disableUnderline='true' style={{fontSize: 12, textAlign: \"left\",}} fullWidth=\"true\" inputProps={{ 'aria-label': 'description', disableUnderline: true }} />\n                  {/* <MenuBookTwoTone style={{color: \"#3599FF\", marginRight: 10}}/> */}\n                  {/* <PostAddTwoTone style={{color: \"#3599FF\",  marginRight: 10}}/> */}\n                  <EmojiEmotionsTwoTone style={{color: \"#3599FF\",  marginRight: 10}}/>\n                  {/* <Gif style={{color: \"#3599FF\",  marginRight: 10}}/> */}\n                  {/* <InsertPhotoTwoTone style={{color: \"#3599FF\",  marginRight: 10}}/> */}\n                  <AttachFileTwoTone style={{color: \"#3599FF\"}}/>\n                  <Button variant=\"primary\" onSubmit={handleSend} onClick={handleSend} style={{}}>Send</Button>\n                </div>\n              </Container>\n          </Container>\n      </ThemeProvider>\n  )\n  \n}\n\n//Recieve data from state\nconst mapStateToProps = (state, ownProps) => {\n  //let id = ownProps.match.params.post_id;\n  \n  return {\n    data: state\n  }\n}\n\n//To Send actions to state\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    //deletePost: (id) => dispatch(deletePost(id))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GhostChat);\n"]},"metadata":{},"sourceType":"module"}