{"ast":null,"code":"var _jsxFileName = \"/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js\";\n// firebase.js\n// contains the Firebase context and provider\nimport React, { createContext, useEffect } from 'react';\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app';\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession, updateConversationIDS, updateConversation, updateClientMeta } from '../actions/Actions'; // we create a React Context, for this to be accessible\n// from a component later\n\nconst FirebaseContext = createContext(null);\nexport { FirebaseContext };\nvar start_conversation;\nvar client_id;\nvar session_id;\nexport default (({\n  children\n}) => {\n  let firebase = {\n    app: null,\n    database: null\n  };\n  const dispatch = useDispatch(); // check if firebase app has been initialized previously\n  // if not, initialize with the config we saved earlier\n\n  if (!app.apps.length) {\n    app.initializeApp(firebaseConfig);\n    firebase = {\n      app: app,\n      database: app.database(),\n      api: {\n        initConversationListener,\n        initSession,\n        getTodos,\n        addMessage\n      }\n    };\n  } //Start a listener to check for any new conversations \n\n\n  function initSession(id) {\n    //Check & attatch conversation Listeners for new convos\n    firebase.database.ref('sessions/' + id).once('value', snapshot => {\n      const vals = snapshot.val();\n\n      if (Array.isArray(vals.conversations)) {\n        vals.conversations.forEach(convoID => {\n          console.log(\"lookieHere\", convoID);\n          initConversationListener(convoID);\n        });\n      }\n\n      console.log(\"Sup bits: \", vals); // dispatch Redux action that would update the store\n\n      getClientMeta(vals.clientID);\n      dispatch(updateConversationIDS(vals.conversations));\n    });\n  }\n\n  function createConversation() {\n    var newConversationKey = firebase.database.ref().child('conversations/').push().key;\n    firebase.database.ref('conversations/' + newConversationKey).set({\n      sessionID: session_id,\n      history: start_conversation,\n      clientID: client_id\n    });\n  }\n\n  function addMessage(pointer, id, message) {\n    //var newPostKey = firebase.database().ref().child('posts').push().key;\n    var newPostKey = firebase.database.ref().child('conversations/' + id + '/history').push().key;\n    var selectedDate = new Date();\n    var currentDate = selectedDate;\n    var currentTime = currentDate.getTime();\n    var localOffset = -1 * selectedDate.getTimezoneOffset() * 60000;\n    var stamp = Math.round(new Date(currentTime + localOffset).getTime() / 1000);\n    console.log(\"fb: \", stamp);\n    var updates = {};\n    var postData = {\n      data: message,\n      type: \"message\",\n      sender: \"user\",\n      timestamp: stamp\n    };\n    updates['conversations/' + id + '/history/' + newPostKey] = postData;\n    return firebase.database.ref().update(updates);\n  } //Gets once the metaData of the \n\n\n  function getClientMeta(id) {\n    firebase.database.ref('clients/' + id).once('value').then(snapshot => {\n      const vals = snapshot.val(); // dispatch Redux action that would update the store\n\n      console.log(\"clientFirebase: \", vals);\n      firebase.database.ref('startConvo/' + vals.startConvo).once('value').then(snapshot => {\n        const starterConvo = snapshot.val();\n        start_conversation = starterConvo;\n        dispatch(updateClientMeta(vals.HeaderHome, vals.HeaderDesc, starterConvo, vals.logo, vals.themeColor));\n      });\n    });\n  }\n\n  function initConversationListener(id) {\n    firebase.database.ref('conversations/' + id + '/history').on('child_added', snapshot => {\n      const vals = snapshot.val();\n      console.log(\"ConvoMessages: Firebase\");\n      console.log(id);\n      console.log(vals); // dispatch Redux action that would update the store\n\n      dispatch(updateConversation(id, vals));\n    });\n  } // function to query Todos from the database and \n  // fire a Redux action to update the items in real-time\n\n\n  function getTodos() {\n    firebase.database.ref('sessions').on('value', snapshot => {\n      const vals = snapshot.val();\n      let _records = [];\n\n      for (var key in vals) {\n        _records.push({ ...vals[key],\n          id: key\n        });\n      } // setTodos is a Redux action that would update the todo store\n      // to the _records payload\n\n\n      dispatch(updateSession(_records));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(FirebaseContext.Provider, {\n    value: firebase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, children);\n});","map":{"version":3,"sources":["/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js"],"names":["React","createContext","useEffect","firebaseConfig","app","useDispatch","updateSession","updateConversationIDS","updateConversation","updateClientMeta","FirebaseContext","start_conversation","client_id","session_id","children","firebase","database","dispatch","apps","length","initializeApp","api","initConversationListener","initSession","getTodos","addMessage","id","ref","once","snapshot","vals","val","Array","isArray","conversations","forEach","convoID","console","log","getClientMeta","clientID","createConversation","newConversationKey","child","push","key","set","sessionID","history","pointer","message","newPostKey","selectedDate","Date","currentDate","currentTime","getTime","localOffset","getTimezoneOffset","stamp","Math","round","updates","postData","data","type","sender","timestamp","update","then","startConvo","starterConvo","HeaderHome","HeaderDesc","logo","themeColor","on","_records"],"mappings":"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","sourcesContent":["// firebase.js\n// contains the Firebase context and provider\n\nimport React, { createContext, useEffect } from 'react'\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app'\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession, updateConversationIDS, updateConversation, updateClientMeta } from '../actions/Actions'\n\n\n// we create a React Context, for this to be accessible\n// from a component later\nconst FirebaseContext = createContext(null)\nexport { FirebaseContext }\n\nvar start_conversation;\nvar client_id;\nvar session_id;\n\nexport default ({ children }) => {\n    let firebase = {\n        app: null,\n        database: null\n    }\n\n    const dispatch = useDispatch();\n\n    // check if firebase app has been initialized previously\n    // if not, initialize with the config we saved earlier\n    if (!app.apps.length) {\n        app.initializeApp(firebaseConfig);\n        firebase = {\n            app: app,\n            database: app.database(),\n\n            api: {\n                initConversationListener,\n                initSession,\n                getTodos,\n                addMessage\n            }\n        }\n    }\n\n    //Start a listener to check for any new conversations \n    function initSession(id){\n        //Check & attatch conversation Listeners for new convos\n        firebase.database.ref('sessions/' + id).once('value', (snapshot) => {\n            const vals = snapshot.val();\n\n            if (Array.isArray(vals.conversations)){\n                vals.conversations.forEach(convoID => {\n                    console.log(\"lookieHere\", convoID);\n                    initConversationListener(convoID)\n                });\n            }\n            console.log(\"Sup bits: \", vals)\n            // dispatch Redux action that would update the store\n            getClientMeta(vals.clientID)\n            dispatch(updateConversationIDS(vals.conversations));\n            \n        })\n    }\n\n    function createConversation(){\n        var newConversationKey = firebase.database.ref().child('conversations/').push().key;\n        firebase.database.ref('conversations/' + newConversationKey).set({\n            sessionID: session_id,\n            history: start_conversation,\n            clientID: client_id\n          });\n        \n        \n    }\n\n    function addMessage(pointer, id, message){\n        //var newPostKey = firebase.database().ref().child('posts').push().key;\n\n        var newPostKey = firebase.database.ref().child('conversations/' + id + '/history').push().key;\n\n        var selectedDate = new Date();\n        var currentDate = selectedDate;\n        var currentTime = currentDate.getTime();\n        var localOffset = (-1) * selectedDate.getTimezoneOffset() * 60000;\n        var stamp = Math.round(new Date(currentTime + localOffset).getTime() / 1000);\n\n        console.log(\"fb: \", stamp)\n        var updates = {};\n        var postData = {\n            data: message,\n            type: \"message\",\n            sender: \"user\",\n            timestamp: stamp\n          };\n        updates['conversations/' + id + '/history/' + newPostKey] = postData;\n        return firebase.database.ref().update(updates);\n    }\n\n    //Gets once the metaData of the \n    function getClientMeta(id){\n        firebase.database.ref('clients/' + id).once('value').then((snapshot) => {\n            const vals = snapshot.val();\n            // dispatch Redux action that would update the store\n            console.log(\"clientFirebase: \", vals)\n            firebase.database.ref('startConvo/' + vals.startConvo).once('value').then((snapshot) => {\n                const starterConvo = snapshot.val();\n                start_conversation = starterConvo;\n                dispatch(updateClientMeta(vals.HeaderHome, vals.HeaderDesc, starterConvo, vals.logo, vals.themeColor))\n            })\n            \n        })\n    }\n\n    function initConversationListener(id){\n        firebase.database.ref('conversations/' + id + '/history').on('child_added', (snapshot) => {\n            const vals = snapshot.val();\n            console.log(\"ConvoMessages: Firebase\")\n            console.log(id);\n            console.log(vals);\n            // dispatch Redux action that would update the store\n            dispatch(updateConversation(id, vals));\n        })\n    }\n\n    // function to query Todos from the database and \n    // fire a Redux action to update the items in real-time\n    function getTodos(){\n        firebase.database.ref('sessions').on('value', (snapshot) => {\n            const vals = snapshot.val();\n            let _records = [];\n            for(var key in vals){\n                _records.push({\n                    ...vals[key],\n                    id: key\n                });\n            }\n            // setTodos is a Redux action that would update the todo store\n            // to the _records payload\n            dispatch(updateSession(_records));\n        })\n    }\n\n    return (\n        <FirebaseContext.Provider value={firebase}>\n            {children}\n        </FirebaseContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}