{"ast":null,"code":"var _jsxFileName = \"/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js\";\n// firebase.js\n// contains the Firebase context and provider\nimport React, { createContext, useEffect } from 'react';\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app';\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession } from '../actions/Actions'; // we create a React Context, for this to be accessible\n// from a component later\n\nconst FirebaseContext = createContext(null);\nexport { FirebaseContext };\nexport default (({\n  children\n}) => {\n  let firebase = {\n    app: null,\n    database: null\n  };\n  const dispatch = useDispatch(); // check if firebase app has been initialized previously\n  // if not, initialize with the config we saved earlier\n\n  if (!app.apps.length) {\n    app.initializeApp(firebaseConfig);\n    firebase = {\n      app: app,\n      database: app.database(),\n      api: {\n        initSession,\n        getTodos\n      }\n    };\n  } //Start a listener to check for any new conversations \n\n\n  function initSession(id) {\n    firebase.database.ref('sessions/' + id).on('child_added', snapshot => {\n      console.log(\"Sup bits: \" + id);\n      const vals = snapshot.val(); // dispatch Redux action that would update the store\n\n      dispatch(updateSession(vals));\n    });\n  }\n\n  function initConversationListener(id) {\n    firebase.database.ref('conversations/' + id).on('child_added', snapshot => {\n      console.log(\"Sup bits: \" + id);\n      const vals = snapshot.val(); // dispatch Redux action that would update the store\n\n      dispatch(updateSession(vals));\n    });\n  } // function to query Todos from the database and \n  // fire a Redux action to update the items in real-time\n\n\n  function getTodos() {\n    firebase.database.ref('sessions').on('value', snapshot => {\n      const vals = snapshot.val();\n      let _records = [];\n\n      for (var key in vals) {\n        _records.push({ ...vals[key],\n          id: key\n        });\n      } // setTodos is a Redux action that would update the todo store\n      // to the _records payload\n\n\n      dispatch(updateSession(_records));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(FirebaseContext.Provider, {\n    value: firebase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, children);\n});","map":{"version":3,"sources":["/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js"],"names":["React","createContext","useEffect","firebaseConfig","app","useDispatch","updateSession","FirebaseContext","children","firebase","database","dispatch","apps","length","initializeApp","api","initSession","getTodos","id","ref","on","snapshot","console","log","vals","val","initConversationListener","_records","key","push"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,oBAA9B,C,CAEA;AACA;;AACA,MAAMC,eAAe,GAAGN,aAAa,CAAC,IAAD,CAArC;AACA,SAASM,eAAT;AAEA,gBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7B,MAAIC,QAAQ,GAAG;AACXL,IAAAA,GAAG,EAAE,IADM;AAEXM,IAAAA,QAAQ,EAAE;AAFC,GAAf;AAKA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CAN6B,CAQ7B;AACA;;AACA,MAAI,CAACD,GAAG,CAACQ,IAAJ,CAASC,MAAd,EAAsB;AAClBT,IAAAA,GAAG,CAACU,aAAJ,CAAkBX,cAAlB;AACAM,IAAAA,QAAQ,GAAG;AACPL,MAAAA,GAAG,EAAEA,GADE;AAEPM,MAAAA,QAAQ,EAAEN,GAAG,CAACM,QAAJ,EAFH;AAIPK,MAAAA,GAAG,EAAE;AACDC,QAAAA,WADC;AAEDC,QAAAA;AAFC;AAJE,KAAX;AASH,GArB4B,CAuB7B;;;AACA,WAASD,WAAT,CAAqBE,EAArB,EAAwB;AACpBT,IAAAA,QAAQ,CAACC,QAAT,CAAkBS,GAAlB,CAAsB,cAAcD,EAApC,EAAwCE,EAAxC,CAA2C,aAA3C,EAA2DC,QAAD,IAAc;AACpEC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeL,EAA3B;AACA,YAAMM,IAAI,GAAGH,QAAQ,CAACI,GAAT,EAAb,CAFoE,CAGpE;;AACAd,MAAAA,QAAQ,CAACL,aAAa,CAACkB,IAAD,CAAd,CAAR;AACH,KALD;AAMH;;AAED,WAASE,wBAAT,CAAkCR,EAAlC,EAAqC;AACjCT,IAAAA,QAAQ,CAACC,QAAT,CAAkBS,GAAlB,CAAsB,mBAAmBD,EAAzC,EAA6CE,EAA7C,CAAgD,aAAhD,EAAgEC,QAAD,IAAc;AACzEC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeL,EAA3B;AACA,YAAMM,IAAI,GAAGH,QAAQ,CAACI,GAAT,EAAb,CAFyE,CAGzE;;AACAd,MAAAA,QAAQ,CAACL,aAAa,CAACkB,IAAD,CAAd,CAAR;AACH,KALD;AAMH,GAxC4B,CA0C7B;AACA;;;AACA,WAASP,QAAT,GAAmB;AACfR,IAAAA,QAAQ,CAACC,QAAT,CAAkBS,GAAlB,CAAsB,UAAtB,EAAkCC,EAAlC,CAAqC,OAArC,EAA+CC,QAAD,IAAc;AACxD,YAAMG,IAAI,GAAGH,QAAQ,CAACI,GAAT,EAAb;AACA,UAAIE,QAAQ,GAAG,EAAf;;AACA,WAAI,IAAIC,GAAR,IAAeJ,IAAf,EAAoB;AAChBG,QAAAA,QAAQ,CAACE,IAAT,CAAc,EACV,GAAGL,IAAI,CAACI,GAAD,CADG;AAEVV,UAAAA,EAAE,EAAEU;AAFM,SAAd;AAIH,OARuD,CASxD;AACA;;;AACAjB,MAAAA,QAAQ,CAACL,aAAa,CAACqB,QAAD,CAAd,CAAR;AACH,KAZD;AAaH;;AAED,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAElB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ;AAKH,CAjED","sourcesContent":["// firebase.js\n// contains the Firebase context and provider\n\nimport React, { createContext, useEffect } from 'react'\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app'\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession } from '../actions/Actions'\n\n// we create a React Context, for this to be accessible\n// from a component later\nconst FirebaseContext = createContext(null)\nexport { FirebaseContext }\n\nexport default ({ children }) => {\n    let firebase = {\n        app: null,\n        database: null\n    }\n\n    const dispatch = useDispatch();\n\n    // check if firebase app has been initialized previously\n    // if not, initialize with the config we saved earlier\n    if (!app.apps.length) {\n        app.initializeApp(firebaseConfig);\n        firebase = {\n            app: app,\n            database: app.database(),\n\n            api: {\n                initSession,\n                getTodos\n            }\n        }\n    }\n\n    //Start a listener to check for any new conversations \n    function initSession(id){\n        firebase.database.ref('sessions/' + id).on('child_added', (snapshot) => {\n            console.log(\"Sup bits: \" + id)\n            const vals = snapshot.val();\n            // dispatch Redux action that would update the store\n            dispatch(updateSession(vals));\n        })\n    }\n\n    function initConversationListener(id){\n        firebase.database.ref('conversations/' + id).on('child_added', (snapshot) => {\n            console.log(\"Sup bits: \" + id)\n            const vals = snapshot.val();\n            // dispatch Redux action that would update the store\n            dispatch(updateSession(vals));\n        })\n    }\n\n    // function to query Todos from the database and \n    // fire a Redux action to update the items in real-time\n    function getTodos(){\n        firebase.database.ref('sessions').on('value', (snapshot) => {\n            const vals = snapshot.val();\n            let _records = [];\n            for(var key in vals){\n                _records.push({\n                    ...vals[key],\n                    id: key\n                });\n            }\n            // setTodos is a Redux action that would update the todo store\n            // to the _records payload\n            dispatch(updateSession(_records));\n        })\n    }\n\n    return (\n        <FirebaseContext.Provider value={firebase}>\n            {children}\n        </FirebaseContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}