{"ast":null,"code":"var _jsxFileName = \"/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js\";\n// firebase.js\n// contains the Firebase context and provider\nimport React, { createContext, useEffect } from 'react';\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app';\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession, updateConversationIDS, updateConversation, updateClientMeta, updateSessionMeta } from '../actions/Actions'; // we create a React Context, for this to be accessible\n// from a component later\n\nconst FirebaseContext = createContext(null);\nexport { FirebaseContext };\nvar start_conversation;\nvar client_id;\nvar session_id;\nexport default (({\n  children\n}) => {\n  let firebase = {\n    app: null,\n    database: null\n  };\n  const dispatch = useDispatch(); // check if firebase app has been initialized previously\n  // if not, initialize with the config we saved earlier\n\n  if (!app.apps.length) {\n    app.initializeApp(firebaseConfig);\n    firebase = {\n      app: app,\n      database: app.database(),\n      api: {\n        initConversationListener,\n        initSession,\n        getTodos,\n        addMessage,\n        createConversation,\n        setMetaData\n      }\n    };\n  }\n\n  var con; //Start a listener to check for any new conversations \n\n  function initSession(id) {\n    //Check & attatch conversation Listeners for new convos\n    session_id = id;\n    firebase.database.ref('sessions/' + id).once('value', snapshot => {\n      const vals = snapshot.val();\n      dispatch(updateSessionID(id));\n      console.log(\"Sup bits: \", vals); // dispatch Redux action that would update the store\n\n      client_id = vals.clientID;\n      getClientMeta(vals.clientID);\n    });\n    firebase.database.ref('sessions/' + id + '/conversations').on('child_added', snapshot => {\n      const vals = snapshot.val();\n\n      if (Array.isArray(vals)) {\n        vals.conversations.forEach(convoID => {\n          console.log(\"lookieHere\", convoID);\n          initConversationListener(convoID);\n        });\n      }\n\n      console.log(\"convoAdded: Firebase\");\n      console.log(vals); // dispatch Redux action that would update the store\n\n      initConversationListener(vals);\n      dispatch(updateConversationIDS(vals));\n    });\n  }\n\n  async function createConversation() {\n    var newConversationKey = firebase.database.ref().child('conversations/').push().key;\n    firebase.database.ref('conversations/' + newConversationKey).set({\n      sessionID: session_id,\n      history: start_conversation,\n      clientID: client_id\n    }).then(snapshot => {\n      console.log(\"New COnversation Created\", session_id);\n      firebase.database.ref('sessions/' + session_id + '/conversations').push(newConversationKey);\n    });\n    return newConversationKey;\n  }\n\n  function addMessage(pointer, id, message) {\n    //var newPostKey = firebase.database().ref().child('posts').push().key;\n    var newPostKey = firebase.database.ref().child('conversations/' + id + '/history').push().key;\n    var selectedDate = new Date();\n    var currentDate = selectedDate;\n    var currentTime = currentDate.getTime();\n    var localOffset = -1 * selectedDate.getTimezoneOffset() * 60000;\n    var stamp = Math.round(new Date(currentTime + localOffset).getTime() / 1000);\n    console.log(\"fb: \", stamp);\n    var updates = {};\n    var postData = {\n      data: message,\n      type: \"message\",\n      sender: \"user\",\n      timestamp: stamp\n    };\n    updates['conversations/' + id + '/history/' + newPostKey] = postData;\n    return firebase.database.ref().update(updates);\n  } //Gets once the metaData of the \n\n\n  function getClientMeta(id) {\n    firebase.database.ref('clients/' + id).once('value').then(snapshot => {\n      const vals = snapshot.val(); // dispatch Redux action that would update the store\n\n      console.log(\"clientFirebase: \", vals);\n      firebase.database.ref('startConvo/' + vals.startConvo).once('value').then(snapshot => {\n        console.log(\"StarterCOnversationDATA: \", snapshot.val());\n        const starterConvo = snapshot.val();\n        start_conversation = starterConvo;\n        dispatch(updateClientMeta(vals.HeaderHome, vals.HeaderDesc, starterConvo, vals.logo, vals.themeColor));\n      });\n    });\n  }\n\n  function setMetaData(data) {\n    var updates = {};\n    updates['sessions/' + session_id + '/meta'] = data;\n    firebase.database.ref().update(updates).then(snapshot => {\n      console.log(\"sucessfuly added session meta\");\n      dispatch(updateSessionMeta(data));\n    });\n  }\n\n  function initConversationListener(id) {\n    firebase.database.ref('conversations/' + id + '/history').on('child_added', snapshot => {\n      const vals = snapshot.val();\n      console.log(\"ConvoMessages: Firebase\");\n      console.log(id);\n      console.log(vals); // dispatch Redux action that would update the store\n\n      dispatch(updateConversation(id, vals));\n    });\n  } // function to query Todos from the database and \n  // fire a Redux action to update the items in real-time\n\n\n  function getTodos() {\n    firebase.database.ref('sessions').on('value', snapshot => {\n      const vals = snapshot.val();\n      let _records = [];\n\n      for (var key in vals) {\n        _records.push({ ...vals[key],\n          id: key\n        });\n      } // setTodos is a Redux action that would update the todo store\n      // to the _records payload\n\n\n      dispatch(updateSession(_records));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(FirebaseContext.Provider, {\n    value: firebase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, children);\n});","map":{"version":3,"sources":["/Users/jatinkumar/Downloads/BonsaiChat/src/firebase/firebase.js"],"names":["React","createContext","useEffect","firebaseConfig","app","useDispatch","updateSession","updateConversationIDS","updateConversation","updateClientMeta","updateSessionMeta","FirebaseContext","start_conversation","client_id","session_id","children","firebase","database","dispatch","apps","length","initializeApp","api","initConversationListener","initSession","getTodos","addMessage","createConversation","setMetaData","con","id","ref","once","snapshot","vals","val","updateSessionID","console","log","clientID","getClientMeta","on","Array","isArray","conversations","forEach","convoID","newConversationKey","child","push","key","set","sessionID","history","then","pointer","message","newPostKey","selectedDate","Date","currentDate","currentTime","getTime","localOffset","getTimezoneOffset","stamp","Math","round","updates","postData","data","type","sender","timestamp","update","startConvo","starterConvo","HeaderHome","HeaderDesc","logo","themeColor","_records"],"mappings":"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","sourcesContent":["// firebase.js\n// contains the Firebase context and provider\n\nimport React, { createContext, useEffect } from 'react'\nimport firebaseConfig from './firebaseConfig';\nimport app from 'firebase/app'\nimport 'firebase/database';\nimport { useDispatch } from 'react-redux';\nimport { updateSession, updateConversationIDS, updateConversation, updateClientMeta, updateSessionMeta } from '../actions/Actions'\n\n\n// we create a React Context, for this to be accessible\n// from a component later\nconst FirebaseContext = createContext(null)\nexport { FirebaseContext }\n\nvar start_conversation;\nvar client_id;\nvar session_id;\n\nexport default ({ children }) => {\n    let firebase = {\n        app: null,\n        database: null\n    }\n\n    const dispatch = useDispatch();\n\n    // check if firebase app has been initialized previously\n    // if not, initialize with the config we saved earlier\n    if (!app.apps.length) {\n        app.initializeApp(firebaseConfig);\n        firebase = {\n            app: app,\n            database: app.database(),\n\n            api: {\n                initConversationListener,\n                initSession,\n                getTodos,\n                addMessage,\n                createConversation,\n                setMetaData,\n            }\n        }\n    }\n    var con;\n    //Start a listener to check for any new conversations \n    function initSession(id){\n        //Check & attatch conversation Listeners for new convos\n        session_id = id;\n        firebase.database.ref('sessions/' + id).once('value', (snapshot) => {\n            const vals = snapshot.val();\n            dispatch(updateSessionID(id))\n            \n            console.log(\"Sup bits: \", vals)\n            // dispatch Redux action that would update the store\n            client_id = vals.clientID;\n            getClientMeta(vals.clientID)\n\n            \n        })\n\n        firebase.database.ref('sessions/' + id + '/conversations').on('child_added', (snapshot) => {\n            const vals = snapshot.val();\n\n            if (Array.isArray(vals)){\n                vals.conversations.forEach(convoID => {\n                    console.log(\"lookieHere\", convoID);\n                    initConversationListener(convoID)\n                });\n            }\n\n\n            console.log(\"convoAdded: Firebase\")\n            console.log(vals);\n            // dispatch Redux action that would update the store\n            initConversationListener(vals)\n            dispatch(updateConversationIDS(vals));\n        })\n    }\n\n    async function createConversation(){\n        var newConversationKey = firebase.database.ref().child('conversations/').push().key;\n        firebase.database.ref('conversations/' + newConversationKey).set({\n            sessionID: session_id,\n            history: start_conversation,\n            clientID: client_id\n          }).then((snapshot) => {\n            console.log(\"New COnversation Created\", session_id);\n            firebase.database.ref('sessions/' + session_id + '/conversations').push(\n                newConversationKey\n            )\n            \n          })  \n          return newConversationKey;\n    }\n\n    function addMessage(pointer, id, message){\n        //var newPostKey = firebase.database().ref().child('posts').push().key;\n\n        var newPostKey = firebase.database.ref().child('conversations/' + id + '/history').push().key;\n\n        var selectedDate = new Date();\n        var currentDate = selectedDate;\n        var currentTime = currentDate.getTime();\n        var localOffset = (-1) * selectedDate.getTimezoneOffset() * 60000;\n        var stamp = Math.round(new Date(currentTime + localOffset).getTime() / 1000);\n\n        console.log(\"fb: \", stamp)\n        var updates = {};\n        var postData = {\n            data: message,\n            type: \"message\",\n            sender: \"user\",\n            timestamp: stamp\n          };\n        updates['conversations/' + id + '/history/' + newPostKey] = postData;\n        return firebase.database.ref().update(updates);\n    }\n\n    //Gets once the metaData of the \n    function getClientMeta(id){\n        firebase.database.ref('clients/' + id).once('value').then((snapshot) => {\n            const vals = snapshot.val();\n            // dispatch Redux action that would update the store\n            console.log(\"clientFirebase: \", vals)\n            firebase.database.ref('startConvo/' + vals.startConvo).once('value').then((snapshot) => {\n                console.log(\"StarterCOnversationDATA: \", snapshot.val())\n                const starterConvo = snapshot.val();\n                start_conversation = starterConvo;\n                dispatch(updateClientMeta(vals.HeaderHome, vals.HeaderDesc, starterConvo, vals.logo, vals.themeColor))\n            })\n            \n        })\n    }\n\n    function setMetaData(data){\n        var updates = {};\n        updates['sessions/' + session_id + '/meta'] = data;\n        firebase.database.ref().update(updates).then((snapshot) => {\n            console.log(\"sucessfuly added session meta\")\n            dispatch(updateSessionMeta(data))\n        })\n    }\n\n    function initConversationListener(id){\n        firebase.database.ref('conversations/' + id + '/history').on('child_added', (snapshot) => {\n            const vals = snapshot.val();\n            console.log(\"ConvoMessages: Firebase\")\n            console.log(id);\n            console.log(vals);\n            // dispatch Redux action that would update the store\n            dispatch(updateConversation(id, vals));\n        })\n    }\n\n    // function to query Todos from the database and \n    // fire a Redux action to update the items in real-time\n    function getTodos(){\n        firebase.database.ref('sessions').on('value', (snapshot) => {\n            const vals = snapshot.val();\n            let _records = [];\n            for(var key in vals){\n                _records.push({\n                    ...vals[key],\n                    id: key\n                });\n            }\n            // setTodos is a Redux action that would update the todo store\n            // to the _records payload\n            dispatch(updateSession(_records));\n        })\n    }\n\n    return (\n        <FirebaseContext.Provider value={firebase}>\n            {children}\n        </FirebaseContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}